%require "3.2"
%language "c++"
%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires{
#include <iostream>
#include <vector>
#include <deque>
#include <string>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <fcntl.h>
#include <dirent.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <regex>
#include <signal.h>

void print_cwd();
void echo_exec(std::vector <std:: string> P);
void pwd_exec();
void dive(std::string pth, std::vector <std:: string> &P);
void handler(int signal);

struct inp{
    std::vector <std::vector <std:: string> > P;
    bool flag_in;
    std::string f_in;
    bool flag_out;
    std::string f_out;
};

void Tubes(inp I);
}

%code
{
    #define YY_DECL yy::parser::symbol_type yylex ()
    YY_DECL;
}

%token <std::string >  STRING PATH SET VAR TIME CD
%token <char> OR LEND EQ IN OUT
%type  <std::string >  cmd item
%type  <std::vector <std:: string> > fullcommand args
%type  <inp>  ln
%start ex

%%
ex : ex ln LEND{$2.flag_out = false; $2.f_out = "no out redirections";
                if(($2.P).size() > 0) Tubes($2);
                print_cwd();}
   | ex LEND {print_cwd();}
   | ex ln OUT STRING LEND {$2.flag_out = true; $2.f_out = $4;
                              if(($2.P).size() > 0) Tubes($2);
                              print_cwd();}
   | ln LEND {$1.flag_out = false; $1.f_out = "no out redirections";
              if(($1.P).size() > 0) Tubes($1);
              print_cwd();}
   | ex TIME ln LEND {$3.flag_out = false; $3.f_out = "no out redirections";
                      if(($3.P).size() > 0) Tubes($3);
                      struct rusage ru;
                      getrusage(RUSAGE_SELF, &ru);
                      std::cout << ru.ru_stime.tv_usec << " usec \n";
                      print_cwd();}
   | TIME ln LEND {$2.flag_out = false; $2.f_out = "no out redirections";
                   if(($2.P).size() > 0) Tubes($2);
                   struct rusage ru;
                   getrusage(RUSAGE_SELF, &ru);
                   std::cout << ru.ru_stime.tv_usec << " usec \n";
                   print_cwd();}
   | ln OUT STRING LEND {$1.flag_out = true; $1.f_out = $3;
                          if(($1.P).size() > 0) Tubes($1);
                          print_cwd();}
   | ex CD PATH LEND {int check = chdir($3.c_str());
                      if(check == -1) std::cerr << "Can't go to such place\n";
                      print_cwd();}
   | CD PATH LEND {int check = chdir($2.c_str());
                   if(check == -1) std::cerr << "Can't go to such place\n";
                   print_cwd();}
   | LEND {print_cwd();}
   ;
ln : ln OR fullcommand {($1.P).push_back($3); $$ = $1;}
   | fullcommand {($$.P).push_back($1); $$.flag_in = false; $$.f_in = "no in redirections";}
   | fullcommand IN STRING {($$.P).push_back($1); $$.flag_in = true; $$.f_in = $3;}
   | ln OR setcommand {($$.P) = ($$.P);}
   | setcommand {($$.P) = ($$.P); $$.flag_in = false; $$.f_in = "no in redirections";}
   ;

setcommand : SET VAR EQ item {setenv($2.c_str(), $4.c_str(), 1);}
           ;

fullcommand : cmd args {std::vector<std:: string>::iterator it = $2.begin();
                        $2.insert(it, $1); $$ = $2;}
            | cmd {$$.push_back($1);}
            ;
args : args item {$1.push_back($2); $$ = $1;}
     | item  {$$.push_back($1);}
     | args VAR {char *tmp = getenv($2.c_str());
                 if(tmp == NULL){
                     std::cerr << "variable was not seted\n";
                 }
                 else $1.push_back((std::string)tmp); $$ =$1;}
     | args PATH {dive($2, $1); $$ = $1;}
     | VAR {char *tmp = getenv($1.c_str());
           if(tmp == NULL){
               std::cerr << "variable was not seted\n";
           }
           else $$.push_back((std::string)tmp);}
     | PATH {std::vector <std::string> tmp; dive($1,tmp); $$ = tmp;}
     ;
item : STRING {/*std::cout << " item " << $1 << "\n";*/ $$ = $1;}
     ;
cmd : STRING {/*std::cout << "cmd " << $1 << "\n"*/; $$ = $1;}
    ;
%%

void handler(int signal){
    std::cout << "\n";
}

void echo_exec(std::vector <std:: string> P){
    for(int i = 1; i < P.size()-1; i++){
        std::cout << P[i] << " ";
    }
    if(P.size() > 1) std::cout << P[P.size()-1] << "\n";
}

void pwd_exec(){
    char cwd[256];
    getcwd(cwd, sizeof(cwd));
    std::cout << cwd << "\n";
}

void Tubes(inp I){

    int fd_in, fd_out;
    if(I.flag_in){
        fd_in = open((I.f_in).c_str(), O_RDONLY, 0666);
        if(fd_in < 0){
            printf("Ошибка при открытии файла. \n");
        }
    }

    if(I.flag_out){
        fd_out = open((I.f_out).c_str(),O_WRONLY|O_CREAT|O_TRUNC,0666);
        if(fd_out < 0){
            printf("Ошибка при открытии файла. \n");
        }
    }

    pid_t lastp;
    signal(SIGINT, handler);
    std::vector <std:: vector <int> > pd((I.P).size()-1, (std::vector<int> (2,0)));
    for(int i = 0; i < pd.size(); i++) {int fd[2]; pipe(fd); pd[i][0] = fd[0]; pd[i][1] = fd[1];}
    for(int i = 0; i < (I.P).size(); i++){
        lastp = fork();
        if(lastp == 0){//child
            //std:: cout << "I'm a child " << getpid() << "\n";
            signal(SIGINT,SIG_DFL);

            if(i == 0 && I.flag_in){
                close(STDIN_FILENO);
                dup2(fd_in,STDIN_FILENO);
            }
            if(i == pd.size() && I.flag_out){
                close(STDOUT_FILENO);
                dup2(fd_out,STDOUT_FILENO);
            }
            if(i < pd.size()) {
                close(STDOUT_FILENO);
                dup2(pd[i][1], STDOUT_FILENO);
            }

            for(int j = 0; j < pd.size(); j++) close(pd[j][1]);

            if(i > 0) {
                close(STDIN_FILENO);
                dup2(pd[i-1][0], STDIN_FILENO);
            }

            for(int j = 0; j < pd.size(); j++) close(pd[j][0]);

            if((I.P)[i][0] == "echo"){
                echo_exec((I.P)[i]);
                exit(0);
            }
            if((I.P)[i][0] == "pwd"){
                pwd_exec();
                exit(0);
            }

            //std::cout << (I.P)[i][0] << " input\n";
            std::vector <char *> p;
            for (auto const &q: (I.P)[i]) {
                p.push_back((char *)(q.c_str()));
            }
            p.push_back(NULL);
            execvp(p[0], &p[0]);
            perror("execvp");
            exit(0);
        }
    }
    for(int j = 0; j < pd.size(); j++) {
        close(pd[j][0]);
        close(pd[j][1]);
    }
    //std:: cout << "I'm a parent " << getpid() << "\n";

    if(I.flag_in){
        close(fd_in);
    }
    if(I.flag_out){
        close(fd_out);
    }
    waitpid(lastp, NULL, 0);
}

void print_cwd(){
    char cwd[256];
    getcwd(cwd, sizeof(cwd));
    uid_t euid = geteuid();
    if(euid == 0) std::cout << cwd << ">";
    else std::cout << cwd << "!>";
}

void dive(std::string pth, std::vector <std::string> &P){
    std::string help;
    std::deque <std::string> a;
    std::vector <std::string> answ;
    std::string dir0;
    if(pth[0] == '*' || pth[0] == '?'){
        char cwd[256];
        getcwd(cwd, sizeof(cwd));
        dir0 = (std::string) cwd;
        if(pth.size() ==1){
            P.push_back(dir0);
            return;
        }
    }
    int i = 0;
    for(; i <  pth.size() && pth[i] != '*' && pth[i] != '?';i++) {
        dir0 += pth[i];
        help += pth[i];
    }
    if(i == pth.size()){
        P.push_back(pth);
        return;
    }
    //std::cout << i <<" and our dir = " << dir0 << "\n";
    a.push_back(dir0);
    while(i < pth.size()){
        //std::cout << "\t" << pth[i] << " :top now: ";
        while(pth[i] != '/' && i < pth.size()){
            switch (pth[i]){
                case '*' :{
                    //std::cout << help << "1\t";
                    help = help + "([^/])*";
                    //std::cout << help << "2\t";
                    break;
                }
                case '?' :{
                    help = help + ".?";
                    break;
                }
                case '.' :{
                    //std::cout << help << "3\t";
                    help = help + "\\.";
                    //std::cout << help << "4\t";
                    break;
                }
                default :{
                    help = help + pth[i];
                    break;
                }
            }
            i++;
        }
        //std::cout << help << " help\n";

        std::regex rg ((help).c_str());
        int counter = a.size();
        while(counter > 0){
            DIR *dir;
            dir = opendir(a[0].c_str());
            if (dir != NULL) {
                for (auto ent = readdir(dir); ent != NULL; ent = readdir(dir)){
                    std::string en = (std::string) (ent->d_name);
                    std::string hel;
                    if(a[0][a[0].size() -1] != '/') hel = a[0] + (char)(47) + en;
                    else hel = a[0] + en;
                    //std::cout << hel << " in\n";
                    if (en != "." && en != ".." && std::regex_match(hel, rg)) {
                        if(i != pth.size()) a.push_back(hel);
                        else answ.push_back(hel);
                        //std::cout <<"\t" << hel << " in a row\n";
                    }
                }
            }
            a.pop_front();
            closedir(dir);
            counter--;
        }
        //std::cout<< "\t" << answ.size() << " output\n";

        //for(int it = 0; it < answ.size(); it++) std::cout << answ[it] << " in answers\n";
        //std::cout<< "\t" << answ.size() << " size\n";
        if(i < pth.size() && pth[i] == '/'){
            help = help + "/";
            i++;
        }
    }
    //std::cout << help << " help\n";
    std::regex rg ((help).c_str());
    for(int it = 0; it < answ.size(); it++){
        //std::cout<< "\t" << answ.size() << " output\n";
        if(std::regex_match(answ[it], rg)) {
            P.push_back(answ[it]);
        }
    }
    //std::cout<< "\t" << answ.size() << " output\n";
    //for(int it = 0; it < answ.size(); it++) std::cout << answ[it] << " final answers\n";
    if(answ.size()==0) P.push_back(pth);
}

int main(){
      print_cwd();
      int res = 1;
      yy::parser pars;
      while(res == 1){
          res = pars.parse();
      }
      return res;
}

void yy::parser::error (const std::string& m)
{
  std::cerr << m << '\n';
}
